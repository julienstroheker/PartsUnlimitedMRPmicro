version: 2
variables: 
  - &workdir
    /tmp/circleci
  - &branchignore
    ignore: [noci, gh-pages]
  - &dockerbuildimage
      - image: circleci/golang
  - &dockerazureimage
      - image: microsoft/azure-cli
  - &gradleimage
      - image: gradle:3.4.1-jdk8-alpine
  - &run-buildjava
    name: Build Service
    command: |
      cd $GIT_FOLDER &&
      gradle build
  - &run-javatestresults
    name: Copy Service Test Results
    command: |
      set -xu
      mkdir -p $TEST_REPORTS/junit/
      find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} $TEST_REPORTS/junit/ \;
      #This dir contains html test output
      #mkdir -p ${TEST_REPORTS}/${GIT_FOLDER}
      #cp -r $GIT_FOLDER/build/reports/tests/* ${TEST_REPORTS}/${GIT_FOLDER}
  - &run-dockerbuild
    name: Build and Push Service Docker Image
    command: |
      TAG=$DOCKER_TAG
      docker build -f ./$GIT_FOLDER/Dockerfile --build-arg port=$SERVICE_PORT --build-arg mongo_connection=mongodb://localhost/$GIT_FOLDER --build-arg VCS_REF=$CIRCLE_SHA1 --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` -t $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:$TAG -t $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:latest .
      if [[ ((`echo $CIRCLE_BRANCH | grep -c "master"` > 0))]]; then 
        echo "Push to registry since it's the master branch."
        docker login $REGISTRY_NAME -u $DOCKER_USER -p $DOCKER_PASS
        docker push $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:$TAG
        docker push $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:latest
        echo "Pushed image: " $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:$TAG " and :latest tag"
      else
        echo "Skip Docker push image since it is not the master branch."
      fi
  - &run-integrationtests
    name: Integration tests template
    command: |
      echo "Running Integration Tests"
      az login --service-principal -u $AZURE_SPN -p $AZURE_SECRET --tenant $AZURE_TENANT
      az container create -g $AZURE_INT_RG --name $DOCKER_IMAGE --image $DOCKER_USER.azurecr.io/$DOCKER_IMAGE:$DOCKER_TAG --cpu 1 --memory 1.5 --registry-login-server $DOCKER_USER.azurecr.io --registry-username $DOCKER_USER --registry-password $DOCKER_PASS --ip-address Public -e expose_port=$SERVICE_PORT mongo_conn=$AZURE_INT_DB --ports $SERVICE_PORT
      STATE=$(az container show -g $AZURE_INT_RG -n $DOCKER_IMAGE --query "instanceView.state")
      while [ $STATE != "\"Running\"" ]
      do
        STATE=$(az container show -g $AZURE_INT_RG -n $DOCKER_IMAGE --query "instanceView.state")
        echo State=$STATE
      done
      IP_INT=$(az container show -g $AZURE_INT_RG -n $DOCKER_IMAGE --query "ipAddress.ip" | sed 's/\"//g')
      if [[ $(curl $IP_INT:$SERVICE_PORT/api/$API_INT_EP | jq length) == "2" ]]; then echo "Test passed"; else exit 1; fi

jobs:
  orderservice:
    working_directory: *workdir
    docker: *gradleimage
    environment:
      GIT_FOLDER: OrderSrvc
      TEST_REPORTS: /tmp/test-reports
    steps:
      - checkout
      - run: *run-buildjava 
      - run: *run-javatestresults

      # Optionally Save and store jar build artifacts
      #- run: |
      #    cp $GIT_FOLDER/build/libs/*.jar /tmp/artifacts

      #- store_artifacts:
      #    path: /tmp/artifacts
      #    destination: build

      # Upload test results to CircleCI
      - store_test_results:
          path: /tmp/test-reports/junit/

      - persist_to_workspace:
          root: OrderSrvc
          paths:
            - "Dockerfile"
            - build/libs/*

  orderservicedocker:
    working_directory: *workdir
    docker: *dockerbuildimage

    environment:
      DOCKER_IMAGE: pumrp-order
      DOCKER_TAG: 1.0.1
      SERVICE_PORT: 8080
      GIT_FOLDER: OrderSrvc

    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /tmp/circleci/OrderSrvc

      - run: *run-dockerbuild

  quoteservice:
    working_directory: *workdir
    docker: *gradleimage

    environment:
      TEST_REPORTS: /tmp/test-reports 
      GIT_FOLDER: QuoteSrvc

    steps:
      - checkout
      - run: *run-buildjava 
      - run: *run-javatestresults

      # Optionally Save and store jar build artifacts
      #- run: |
      #    cp $GIT_FOLDER/build/libs/*.jar /tmp/artifacts

      #- store_artifacts:
      #    path: /tmp/artifacts
      #    destination: build

      # Upload test results
      - store_test_results:
          path: /tmp/test-reports/junit/

      - persist_to_workspace:
          root: QuoteSrvc
          paths:
            - "Dockerfile"
            - build/libs/*

  quoteservicedocker:
    working_directory: *workdir
    docker: *dockerbuildimage

    environment:
      DOCKER_IMAGE: pumrp-quote
      DOCKER_TAG: 1.0.1
      SERVICE_PORT: 8080
      GIT_FOLDER: QuoteSrvc

    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /tmp/circleci/QuoteSrvc

      - run: *run-dockerbuild

  shipmentservice:
    working_directory: *workdir
    docker: *gradleimage

    environment:
      TEST_REPORTS: /tmp/test-reports
      GIT_FOLDER: ShipmentSrvc

    steps:
      - checkout
      - run: *run-buildjava 
      - run: *run-javatestresults

      # Optionally Save and store jar build artifacts
      #- run: |
      #    cp $GIT_FOLDER/build/libs/*.jar /tmp/artifacts

      #- store_artifacts:
      #    path: /tmp/artifacts
      #    destination: build

      # Upload test results
      - store_test_results:
          path: /tmp/test-reports/junit/

      - persist_to_workspace:
          root: ShipmentSrvc
          paths:
            - "Dockerfile"
            - build/libs/*

  shipmentservicedocker:
    working_directory: *workdir
    docker: *dockerbuildimage

    environment:
      DOCKER_IMAGE: pumrp-shipment
      DOCKER_TAG: 1.0.1
      SERVICE_PORT: 8080
      GIT_FOLDER: ShipmentSrvc

    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /tmp/circleci/ShipmentSrvc

      - run: *run-dockerbuild

  catalogservice:
    working_directory: *workdir
    docker: *gradleimage

    environment:
      GIT_FOLDER: CatalogSrvc
      TEST_REPORTS: /tmp/test-reports

    steps:
      - checkout
      - run: *run-buildjava 
      - run: *run-javatestresults

      # Optionally Save and store jar build artifacts
      #- run: |
      #    cp $GIT_FOLDER/build/libs/*.jar /tmp/artifacts

      #- store_artifacts:
      #    path: /tmp/artifacts
      #    destination: build

      # Upload test results to CircleCI
      - store_test_results:
          path: /tmp/test-reports/junit/

      - persist_to_workspace:
          root: CatalogSrvc
          paths:
            - "Dockerfile"
            - build/libs/*

  catalogservicedocker:
    working_directory: *workdir
    docker: *dockerbuildimage

    environment:
      DOCKER_IMAGE: pumrp-catalog
      DOCKER_TAG: 1.0.1
      SERVICE_PORT: 8080
      GIT_FOLDER: CatalogSrvc

    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /tmp/circleci/CatalogSrvc

      - run: *run-dockerbuild

  dealerservice:
    working_directory: *workdir
    docker:
      - image: microsoft/dotnet:1.1.2-sdk

    environment:
      SERVICE_PORT: 8080
      GIT_FOLDER: DealerService

    steps:
      - checkout

      - run:
          name: Build Service
          command: |
            echo "Building " $GIT_FOLDER
            cd $GIT_FOLDER
            dotnet restore
            dotnet build

      - persist_to_workspace:
          root: DealerService
          paths:
            - "*"
            - Models
            - Controllers

  dealerservicedocker:
    working_directory: *workdir
    docker: *dockerbuildimage

    environment:
      DOCKER_IMAGE: pumrp-dealer
      DOCKER_TAG: 1.0.1
      GIT_FOLDER: DealerService

    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /tmp/circleci/DealerService

      - run: 
          name: Build and Push Service Docker Image
          command: |
            TAG=$DOCKER_TAG
            echo "Building " $GIT_FOLDER
            docker build -f ./$GIT_FOLDER/Dockerfile --build-arg port=$SERVICE_PORT --build-arg VCS_REF=`git rev-parse --short HEAD` --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` -t $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:$TAG -t $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:latest .
            if [[ ((`echo $CIRCLE_BRANCH | grep -c "master"` > 0))]]; then 
              echo "Push to registry since it's the master branch."
              docker login $REGISTRY_NAME -u $DOCKER_USER -p $DOCKER_PASS
              docker push $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:$TAG
              docker push $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:latest
              echo "Pushed image: " $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:$TAG " and :latest tag"
            else
              echo "Skip Docker push image since it is not the master branch."
            fi

  web:
    working_directory: *workdir
    docker: *gradleimage

    environment:
      GIT_FOLDER: Web

    steps:
      - checkout

      - run: *run-buildjava 

      #- run: |
      #    cp $GIT_FOLDER/build/libs/*.jar /tmp/artifacts

      # Save artifacts
      #- store_artifacts:
      #    path: /tmp/artifacts
      #    destination: build
      - persist_to_workspace:
          root: Web
          paths:
            - "Dockerfile"
            - build/libs/*.war

  webdocker:
    working_directory: *workdir
    docker: *dockerbuildimage

    environment:
      DOCKER_IMAGE: pumrp-web
      DOCKER_TAG: 1.0.1
      GIT_FOLDER: Web
      SERVICE_PORT: 8080

    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /tmp/circleci/Web

      - run:
          name: Build and Push Service Docker Image
          command: |
            echo "Building " $GIT_FOLDER
            TAG=$DOCKER_TAG
            docker build -f ./$GIT_FOLDER/Dockerfile --build-arg port=$SERVICE_PORT --build-arg VCS_REF=`git rev-parse --short HEAD` --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` -t $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:$TAG -t $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:latest .
            if [[ ((`echo $CIRCLE_BRANCH | grep -c "master"` > 0))]]; then 
              echo "Push to registry since it's the master branch."
              docker login $REGISTRY_NAME -u $DOCKER_USER -p $DOCKER_PASS
              docker push $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:$TAG
              docker push $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:latest
              echo "Pushed image: " $REGISTRY_NAMEIMAGE/$DOCKER_IMAGE:$TAG " and :latest tag"
            else
              echo "Skip Docker push image since it is not the master branch."
            fi

  orderint:
      working_directory: *workdir
      docker: *dockerazureimage

      environment:
        DOCKER_IMAGE: pumrp-order
        DOCKER_TAG: latest
        SERVICE_PORT: 8080
        API_EP: orders

      steps:
        - setup_remote_docker

        - run: *run-integrationtests

  quoteint:
      working_directory: *workdir
      docker: *dockerazureimage

      environment:
        DOCKER_IMAGE: pumrp-quote
        DOCKER_TAG: latest
        SERVICE_PORT: 8080
        API_EP: quotes

      steps:
        - setup_remote_docker

        - run: *run-integrationtests

  catalogint:
      working_directory: *workdir
      docker: *dockerazureimage

      environment:
        DOCKER_IMAGE: pumrp-catalog
        DOCKER_TAG: latest
        SERVICE_PORT: 8080
        API_EP: catalog

      steps:
        - setup_remote_docker

        - run: *run-integrationtests

  shipmentint:
      working_directory: *workdir
      docker: *dockerazureimage

      environment:
        DOCKER_IMAGE: pumrp-shipment
        DOCKER_TAG: latest
        SERVICE_PORT: 8080
        API_EP: shipments

      steps:
        - setup_remote_docker

        - run: *run-integrationtests

  dealerint:
      working_directory: *workdir
      docker: *dockerazureimage

      environment:
        DOCKER_IMAGE: pumrp-dealer
        DOCKER_TAG: latest
        SERVICE_PORT: 8080
        API_EP: dealers

      steps:
        - setup_remote_docker

        - run: *run-integrationtests

  createint:
        working_directory: *workdir
        docker: *dockerazureimage

        steps:
          - setup_remote_docker

          - run:
            name: Create the RG used for the integration tests
            command: |
              az login --service-principal -u $AZURE_SPN -p $AZURE_SECRET --tenant $AZURE_TENANT
              az group create -n $AZURE_INT_RG -l $AZURE_INT_LOCATION

  cleanint:
      working_directory: *workdir
      docker: *dockerazureimage

      steps:
        - setup_remote_docker

        - run:
          name: Delete the RG used for the integration tests
          command: |
            az login --service-principal -u $AZURE_SPN -p $AZURE_SECRET --tenant $AZURE_TENANT
            az group delete -n $AZURE_INT_RG -l $AZURE_INT_LOCATION -y

workflows:
  version: 2
  build-pumrp-in-parallel:
    jobs:
      - createint:
          requires:
            - orderservicedocker
            - quoteservicedocker
            - shipmentservicedocker
            - catalogservicedocker
            - dealerservicedocker
      - cleanint:
          requires:
            - quoteint
            - shipmentint
            - catalogint
            - dealerint
            - orderint
      - orderservice:
          filters:
            branches: *branchignore
      - orderhold:
          type: approval
          requires: 
            - orderservice
      - orderservicedocker:
          requires:
            - orderhold
      - orderint:
          requires: 
            - orderservicedocker
      - quoteservice:
          filters:
            branches: *branchignore
      - quotehold:
          type: approval
          requires: 
            - quoteservice
      - quoteservicedocker:
          requires:
            - quotehold
      - quoteint:
          requires: 
            - quoteservicedocker
      - shipmentservice:
          filters:
            branches: *branchignore
      - shipmenthold:
          type: approval
          requires: 
            - shipmentservice
      - shipmentservicedocker:
          requires:
            - shipmenthold
      - shipmentint:
          requires: 
            - shipmentservicedocker
      - catalogservice:
          filters: 
            branches: *branchignore
      - cataloghold:
          type: approval
          requires: 
            - catalogservice
      - catalogservicedocker:
          requires:
            - cataloghold
      - catalogint:
          requires: 
            - catalogservicedocker
      - dealerservice:
          filters:
            branches: *branchignore
      - dealerhold:
          type: approval
          requires: 
            - dealerservice
      - dealerservicedocker:
          requires:
            - dealerhold
      - dealerint:
          requires: 
            - dealerservicedocker
      - web:
          filters:
            branches: *branchignore
      - webhold:
          type: approval
          requires: 
            - web
      - webdocker:
          requires:
            - webhold